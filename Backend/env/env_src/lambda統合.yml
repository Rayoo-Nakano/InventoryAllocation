AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for creating a VPC with public and private subnets, an RDS instance, and an API Gateway backed by Cognito in the Tokyo region.'

Parameters:
  EnvironmentName:
    Type: String
    Default: "Dev"

  APIGatewayStageName:
    Type: String
    Default: "APIStage-dev"
#123
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet1CIDR:
    Type: String
    Default: "10.0.3.0/24"

  # PublicSubnet2CIDR:
  #   Type: String

  PrivateSubnet1CIDR:
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnet2CIDR:
    Type: String  
    Default: "10.0.1.0/24"

  DBMasterUsername:
    Type: String
    Default: "mydbuser"

  DBMasterUserPassword:
    Type: String
    Default: "mydbpassword"
    NoEcho: true

  LambdaCodeBucket:
    Type: String
    Default: "lxj-lambda-code-bucket"

  LambdaCodeKey:
    Type: String
    Default: "fastapi-app/lambda_function.zip"

  ParameterFilePath:
    Type: String
    Default: 's3://lxj-parameter-bucket/LambdaParameters.json'
    Description: 'パラメータファイルのパス'

Resources:
  # VPCの定義
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-VPC'

  # FastAPIアプリケーションを実行するLambda関数
  FastAPIFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'FastAPIFunction'
      Runtime: 'python3.9'
      Handler: 'main.handler'
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          PARAMETER_FILE_PATH: !Ref ParameterFilePath
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  # Lambda関数の実行に必要なIAMロール
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::lxj-parameter-bucket/LambdaParameters.json'

  # インターネットゲートウェイの定義
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-IGW'

  # インターネットゲートウェイをVPCにアタッチ
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # パブリックサブネット1の定義
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Public-Subnet-1'

  # プライベートサブネット1の定義
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Private-Subnet-1'

  # プライベートサブネット2の定義
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Private-Subnet-2'

  # VPCエンドポイント1の定義
  VPCEndpoint1:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1

  # VPCエンドポイント2の定義
  VPCEndpoint2:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet2

  # NATゲートウェイ用のElastic IPの定義
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NATゲートウェイの定義
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # パブリックルートテーブルの定義
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Public-Route-Table'

  # パブリックルートの定義 (デフォルトルート)
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # パブリックサブネット1をパブリックルートテーブルに関連付け
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # プライベートルートテーブル1の定義
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Private-Route-Table-1'

  # プライベートルート1の定義 (デフォルトルート)
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # プライベートサブネット1をプライベートルートテーブル1に関連付け
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # プライベートサブネット2をプライベートルートテーブル1に関連付け
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable1

  # Lambdaセキュリティー
  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Lambda'
      VpcId: !Ref VPC

  # RDSセキュリティグループの定義
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for RDS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # RDSサブネットグループの定義
  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # RDSインスタンスの定義
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      MultiAZ: false
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup

  # # API Gatewayの定義
  # APIGateway:
  #   Type: 'AWS::ApiGateway::RestApi'
  #   Properties:
  #     Name: !Sub '${EnvironmentName}-API'
  #     Description: 'API Gateway for my application'

  # API Gatewayの定義
  APIGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'FastAPIGateway'
      EndpointConfiguration:
        Types:
          - PRIVATE
        VpcEndpointIds: 
          - !Ref VPCEndpoint1
          - !Ref VPCEndpoint2
      Policy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*"
            Condition:
              StringEquals:
                aws:SourceVpce:
                  - !Ref VPCEndpoint1
                  - !Ref VPCEndpoint2

  # API Gateway Authorizerの定義 (Cognitoユーザープールを使用)
  APIGatewayAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      RestApiId: !Ref APIGateway
      Name: 'CognitoAuthorizer'
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      IdentitySource: 'method.request.header.Authorization'

  # # API Gateway リソース (items) の定義
  # APIGatewayResourceItems:
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties:
  #     RestApiId: !Ref APIGateway
  #     ParentId: !GetAtt APIGateway.RootResourceId
  #     PathPart: items

  # # API Gateway リソース (orders) の定義
  # APIGatewayResourceOrders:
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties:
  #     RestApiId: !Ref APIGateway
  #     ParentId: !GetAtt APIGateway.RootResourceId
  #     PathPart: orders

  # API Gatewayのリソース定義
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref APIGateway

  # API Gatewayのメソッド定義とLambda関数との統合
  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref APIGatewayResource
      RestApiId: !Ref APIGateway
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref APIGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${FastAPIFunction.Arn}/invocations'

  # API Gatewayの変更をデプロイ
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - APIGatewayMethod
    Properties:
      RestApiId: !Ref APIGateway
      StageName: !Ref APIGatewayStageName

  # Cognito ユーザープールの定義
  CognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${EnvironmentName}-UserPool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  # Cognito ユーザープールクライアントの定義
  CognitoUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub '${EnvironmentName}-UserPoolClient'
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

Outputs:
  # API GatewayのエンドポイントURLを出力
  APIGatewayInvokeURL:
    Description: 'API GatewayのエンドポイントURL'
    Value: !Sub 'https://${APIGateway}.execute-api.ap-northeast-1.amazonaws.com/${APIGatewayStageName}'
