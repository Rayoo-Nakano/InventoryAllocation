Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ProjectName  # Lambdaファンクション名をプロジェクト名と同じにする
      Runtime: python3.8  # Lambdaファンクションのランタイムを指定
      Handler: app.handler  # Lambdaファンクションのエントリーポイントを指定
      Role: !GetAtt LambdaExecutionRole.Arn  # Lambdaファンクションの実行ロールを指定
      Code:
        S3Bucket: !Ref ArtifactStoreBucket  # Lambdaファンクションのコードが保存されているS3バケットを指定
        S3Key: !Sub "${ProjectName}/${ProjectName}.zip"  # Lambdaファンクションのコードが保存されているS3オブジェクトのキーを指定
      Environment:
        Variables:
          ENV_VAR_1: !Ref EnvironmentVariable1  # 環境変数1を指定
          ENV_VAR_2: !Ref EnvironmentVariable2  # 環境変数2を指定
    DeletionPolicy: Retain  # スタックが削除されてもLambdaファンクションを保持する

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup  # CloudWatch Logsのロググループを作成する権限を付与
                  - logs:CreateLogStream  # CloudWatch Logsのログストリームを作成する権限を付与
                  - logs:PutLogEvents  # CloudWatch Logsにログイベントを書き込む権限を付与
                Resource: arn:aws:logs:*:*:*  # 上記の権限を全てのCloudWatch Logsリソースに対して付与
